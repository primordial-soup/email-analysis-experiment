#!/usr/bin/env perl

use Modern::Perl;
use FindBin::libs;

use EnronBerkeley;
use EnronBerkeley::Message;
use EnronBerkeley::ProjectHelper;

use Text::CSV_XS;
use Path::Tiny;
use Term::ProgressBar;
use List::UtilsBy qw( max_by );
use Digest::MD5 qw(md5);
use YAML;

my $toplevel = EnronBerkeley::ProjectHelper->top_level_directory_path;

my $maildir = $toplevel->child(qw(extract data enron-email berkeley enron_with_categories));
my $dataset = EnronBerkeley->new( directory => $maildir );

## whether or not we want to have problem to be a multiclass one or not
my $multiclass_problem = 0;

## the class to consider when $multiclass_problem is false
## (i.e., when classifying a single class)
my $single_class_label = 1;

my $csv_output_path = EnronBerkeley::ProjectHelper->output_file('text-and-labels.csv');
$csv_output_path->parent->mkpath;
my $csv_output = $csv_output_path->openw_utf8;

my $primary_cat_yaml_path = EnronBerkeley::ProjectHelper->output_file('primary-cat.yml');

my $progress = Term::ProgressBar->new({name => 'E-mails', count => $dataset->number_of_instances, remove => 1, ETA => 'linear' });
my $csv = Text::CSV_XS->new( { sep => "\t", binary => 1, eol => $/, auto_diag => 2 } );

my $email_idx = 0;
my $path_iter = $dataset->_message_iterator;

my $msg_body_seen = {};
my $primary_cat = {};

while( defined( my $filename = $path_iter->() ) ) {
	my $file = $filename;
	my $msg = EnronBerkeley::Message->new( file => $file );

	my @cat_top_level_in_3 = grep { $_->top_level_category_id == 3 } @{ $msg->categories };
	if(@cat_top_level_in_3) {
		## The message has to have been categorised in one of the 3.* categories.

		## Which category has the largest count?
		my $largest_cat_3 = max_by { $_->count } @cat_top_level_in_3;

		$primary_cat->{$largest_cat_3->second_level_category_id}++;

		my $label = $multiclass_problem
			? $largest_cat_3->second_level_category_id
			: 0+($largest_cat_3->second_level_category_id == $single_class_label);
		## Input to learning algorithm
		my $instance = [
			$msg->file->stringify,  # [instance name]
			$label,                 # [label]
			$msg->body_single_line  # [text]
		];

		## remove non-word and digit characters
		my $body_only_word = $msg->body_single_line =~ s/[\W\d]//gr;
		my $hash = md5( $body_only_word ); # hash the body

		## only write if a new message
		unless( exists $msg_body_seen->{$hash} ) {
			$msg_body_seen->{$hash} = 1;
			## Write it out
			$csv->say( $csv_output, $instance );
		}
	}

	$progress->update(++$email_idx);
}

YAML::DumpFile($primary_cat_yaml_path, $primary_cat );

## Done
$csv->eof;
$csv_output->close;
